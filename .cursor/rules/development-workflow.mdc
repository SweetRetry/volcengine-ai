---
description: 
globs: 
alwaysApply: true
---
# 开发工作流程与Git规范

## 🚀 开发工作流程

### 本地开发环境设置
```bash
# 1. 克隆项目
git clone https://github.com/your-org/volcengine-go-server.git
cd volcengine-go-server

# 2. 安装依赖
go mod download

# 3. 复制环境变量配置
cp env.example .env
# 编辑 .env 文件配置必要的环境变量

# 4. 启动依赖服务 (MongoDB + Redis)
docker-compose up -d mongodb redis

# 5. 启动开发服务器
make dev
# 或者使用 Air 热重载
air -c .air.toml

# 6. 启动队列工作器
air -c .air.worker.toml
```

### 开发分支策略
```
main (生产分支)
├── develop (开发分支)
│   ├── feature/ai-image-generation (功能分支)
│   ├── feature/task-queue-optimization (功能分支)
│   └── hotfix/critical-bug-fix (热修复分支)
```

## 📝 Git 提交规范

### 提交消息格式
```
<type>: <中文描述>

[可选的详细说明]

[可选的关联Issue]
```

### 提交类型 (type)
- **feat**: 新功能
- **fix**: 修复bug
- **docs**: 文档更新
- **style**: 代码格式调整 (不影响功能)
- **refactor**: 代码重构
- **perf**: 性能优化
- **test**: 测试相关
- **chore**: 构建过程或辅助工具的变动
- **ci**: CI/CD 配置文件和脚本的变动

### 提交消息示例
```bash
# ✅ 正确的提交消息格式
git commit -m "feat: 添加豆包图像生成API接口"
git commit -m "fix: 修复任务队列重复处理问题"
git commit -m "refactor: 重构AI服务Provider层架构"
git commit -m "docs: 更新API文档和使用说明"
git commit -m "perf: 优化MongoDB查询性能"
git commit -m "test: 添加AI服务集成测试用例"

# ❌ 避免的提交消息
git commit -m "update code"
git commit -m "fix bug"
git commit -m "add new feature"
```

### 详细提交消息示例
```bash
git commit -m "feat: 添加即梦AI视频生成功能

- 集成火山引擎Visual SDK
- 支持文本到视频生成
- 添加视频生成参数验证
- 实现异步任务处理机制

Closes #123"
```

## 🔄 代码审查流程

### Pull Request 模板
```markdown
## 📋 变更描述
简要描述本次PR的主要变更内容

## 🎯 变更类型
- [ ] 新功能 (feat)
- [ ] Bug修复 (fix)
- [ ] 代码重构 (refactor)
- [ ] 性能优化 (perf)
- [ ] 文档更新 (docs)
- [ ] 测试相关 (test)

## 🧪 测试情况
- [ ] 单元测试已通过
- [ ] 集成测试已通过
- [ ] 手动测试已完成

## 📝 检查清单
- [ ] 代码符合项目编码规范
- [ ] 已添加必要的注释和文档
- [ ] 已处理所有TODO和FIXME
- [ ] 已更新相关配置文件
- [ ] 已考虑向后兼容性

## 🔗 相关Issue
Closes #issue_number
```

### 代码审查要点
1. **架构设计**: 是否符合分层架构原则
2. **错误处理**: 是否正确处理和传播错误
3. **性能考虑**: 是否存在性能瓶颈
4. **安全性**: 是否存在安全隐患
5. **测试覆盖**: 是否有足够的测试覆盖
6. **文档完整**: 是否有必要的注释和文档

## 🛠️ 开发工具配置

### Makefile 常用命令
参考项目根目录的 [Makefile](mdc:Makefile)：

```bash
# 开发相关
make dev          # 启动开发服务器
make test         # 运行测试
make test-cover   # 运行测试并生成覆盖率报告
make lint         # 代码检查
make fmt          # 代码格式化

# 构建相关
make build        # 构建二进制文件
make docker-build # 构建Docker镜像
make docker-run   # 运行Docker容器

# 部署相关
make deploy-dev   # 部署到开发环境
make deploy-prod  # 部署到生产环境
```

### Air 热重载配置
- API服务器: [.air.toml](mdc:.air.toml)
- 队列工作器: [.air.worker.toml](mdc:.air.worker.toml)

### VS Code 推荐配置
```json
{
  "go.lintTool": "golangci-lint",
  "go.formatTool": "goimports",
  "go.useLanguageServer": true,
  "go.testFlags": ["-v", "-race"],
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": true
  }
}
```

## 🧪 测试策略

### 测试分层
```
├── 单元测试 (Unit Tests)
│   ├── Service层测试
│   ├── Repository层测试
│   └── Util函数测试
├── 集成测试 (Integration Tests)
│   ├── API接口测试
│   ├── 数据库集成测试
│   └── AI服务集成测试
└── 端到端测试 (E2E Tests)
    └── 完整业务流程测试
```

### 测试命令
```bash
# 运行所有测试
go test ./...

# 运行特定包的测试
go test ./internal/service/...

# 运行测试并生成覆盖率报告
go test -coverprofile=coverage.out ./...
go tool cover -html=coverage.out

# 运行基准测试
go test -bench=. ./...
```

## 🚀 部署流程

### 环境配置
- **开发环境**: 用于日常开发和测试
- **预发布环境**: 用于发布前的最终验证
- **生产环境**: 正式对外提供服务

### Docker 部署
```bash
# 构建镜像
docker build -t volcengine-go-server:latest .

# 运行容器
docker-compose up -d

# 查看日志
docker-compose logs -f server
docker-compose logs -f worker
```

### 健康检查
```bash
# API服务健康检查
curl http://localhost:8080/health

# 队列状态检查
curl http://localhost:8080/admin/queue/stats
```

## 📊 监控和日志

### 日志管理
- 日志文件位置: `logs/` 目录
- 日志轮转: 每日自动轮转
- 日志保留: 默认保留7天
- 日志级别: 通过 `LOG_LEVEL` 环境变量配置

### 性能监控
```go
// 在关键路径添加性能监控
func (s *TaskService) CreateTask(ctx context.Context, req CreateTaskRequest) (*Task, error) {
    start := time.Now()
    defer func() {
        duration := time.Since(start)
        s.logger.WithFields(logrus.Fields{
            "operation": "create_task",
            "duration_ms": duration.Milliseconds(),
        }).Info("任务创建完成")
    }()
    
    // 业务逻辑...
}
```

## 🔧 故障排查

### 常见问题排查
1. **服务启动失败**: 检查环境变量配置和依赖服务状态
2. **AI服务调用失败**: 检查API密钥和网络连接
3. **任务队列阻塞**: 检查Redis连接和队列状态
4. **数据库连接问题**: 检查MongoDB连接字符串和权限

### 调试工具
```bash
# 查看服务状态
make status

# 查看日志
tail -f logs/app.log

# 检查队列状态
redis-cli -h localhost -p 6379 keys "asynq:*"
```
